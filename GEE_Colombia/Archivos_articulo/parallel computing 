#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug 22 13:44:07 2023

@author: bojack
"""



from multiprocessing import Pool
from satelite import colSatellite
from satelite import csv_from_sat
from satelite import statAnalisisData
import geopandas as gpd
import pandas as pd
import numpy as np
import gstools as gs
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import ee
import folium
import urllib.request
from io import BytesIO
from PIL import Image

ee.Initialize(
    opt_url='https://earthengine-highvolume.googleapis.com'
    )


satelliteName = 'COPERNICUS/S5P/OFFL/L3_CH4'
layer = 'CH4_column_volume_mixing_ratio_dry_air_bias_corrected'
initDate = '2018-05-31'
finalDate = '2023-08-10'

methaneSat = colSatellite(satelliteName, layer) # crea el objeto
methaneImageCollection = methaneSat.getImageCollection(initDate, finalDate) # obtiene datos para las fechas especificadas
fronterasMaritimasCol = methaneSat.getROI('fronterasMaritimasCol') # selecciona la region que ya trae el objeto
#methaneImageClip = methaneSat.clipImage(methaneImageCollection, fronterasMaritimasCol) # Recorta la imagen a una regi√≥n

def get_thumb_url(image):
    # Replace this with your implementation of the getThumbURL method
    viz_params = {
        'min': 1600,
        'max': 2000,
        'dimensions': '500x600',
        'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']
    }
    thumb_url = image.getThumbURL(viz_params)
    return thumb_url

if __name__ == '__main__':
    # Create a pool of worker processes
    pool = Pool()

    # Define a list of ee.Image objects
    for departamento in 

    # Use the map method to apply the get_thumb_url function to each image in parallel
    thumb_urls = pool.map(get_thumb_url, images)

    # Do something with the resulting list of thumbnail URLs
    print(thumb_urls)

# Plotting the image prom



thumbnail_url = methaneImageClip.getThumbURL(viz_params)

print(thumbnail_url)
input()
with urllib.request.urlopen(thumbnail_url) as url:
    img = Image.open(url)
    img.show()

"""
{
  "error": {
    "code": 503,
    "message": "The service is currently unavailable.",
    "status": "UNAVAILABLE"
  }
}
"""

